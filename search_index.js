var documenterSearchIndex = {"docs":
[{"location":"quickstart/#Quick-Start-Guide","page":"Quick Start","title":"Quick-Start Guide","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"CurrentModule = FooBar\nDocTestSetup  = quote\n    using MyPackage\nend","category":"page"},{"location":"quickstart/#Installation-and-Setup","page":"Quick Start","title":"Installation and Setup","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Open your Julia REPL terminal and do","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"]\nadd \"https://github.com/casparwb/JuliaDispatch.jl\"\nadd JLD\nusing JLD, JuliaDispatch","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"JLD is a package used by JuliaDispatch to cache and read cached namelists. This needs to be in your workspace in order for it work, thus it is important that it is imported before JuliaDispatch.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Note that things will be quite slow the first time you add and import a package, in addition to when you call a function. This is due to Julia's precompilation routine, and only happens the first time you call a function.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Importing JuliaDispatch does not include any functions into your workspace, but rather allows you to load the individual modules. These modules are","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"Dispatch: this submodule contains the snapshot(...) function which allows reading in a snapshot and saving all the metadata into a dictionary.\nGraphics: high-level plotting of slices (planes), volumes, and 1-d quantities.\nBuffers: methods for stitching together patch data into 2- or 3-dimensional arrays, in addition to resampling methods for re-sizing the domain.\nSelect: methods for extracting patches and data at given positions in the computational domain.\nUtils:  various QOL tools, such as functions for getting the number of snapshots in a folder, among other things.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"After having imported JuliaDispatch, you can include the functionality of any of these modules by doing","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using JuliaDispatch.MODULENAME","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"where MODULENAME is replaced by any of the abovementioned modules. Note that the module name is case-sensitive, and all modules have a capital first letter. You can also directly use a function within a module without explicitly importing it by doing","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"JuliaDispatch.MODULENAME.funcname(args...)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"where funcname is the name of the function exported by the module MODULENAME. ","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"To quickly get the documentation for any function, use the help functionality of the REPL, which you can enter by typing ?. You can then enter a function for which you want the documentation. For example","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"?\nsnapshot","category":"page"},{"location":"quickstart/#Functionality","page":"Quick Start","title":"Functionality","text":"","category":"section"},{"location":"quickstart/#Snapshots","page":"Quick Start","title":"Snapshots","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"The snapshot function returns a dictionary object. To access any of the snapshot's properties, use square brackets and strings. For example","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"time = snapshot[\"time\"]\nprintln(time)","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"gives you the time at which the snapshot was taken. To get all the properties of the snapshot, you can print all the keys or iterate over all key-value pairs","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"println(keys(snap))\n# or\nfor (key, value) in snap\n    println(key, \" \", value)\nend","category":"page"},{"location":"quickstart/#Quantities","page":"Quick Start","title":"Quantities","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"To see which quantities are present in the snapshot, you can print the [\"idx\"][\"dict\"] of a snapshot. This returns a dictionary with keys equal to the different quantites, and values as integers corresponding to their offset in the data files. Any quantity that has a value < 0 is present and can be extracted from the data files.","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"for (k, v) in snap[\"idx\"][\"dict\"]\n    println(k, \" \", v)\nend","category":"page"},{"location":"quickstart/#Expression-Parsing","page":"Quick Start","title":"Expression Parsing","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"The JuliaDispatch package has support for parsing expressions. This means that when extracting patch data, instead of requesting a quantity in a specific data slot, a string containing an expression can be sent in instead. The expression parser will then attempt to parse and evaluate the expression and the return the result for the given patch. Any function that accepts the iv keyword argument supports this functionality. Variables in your workspace can be interpolated into the expression using the $ construct. Example","category":"page"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"pi = 3.14 #\npatch = snap[\"patches\"][1] # get the first patch\nvelocity = snap[\"var\"](\"$pi*sqrt(ux^2 + uy^2 + uz^2)\") # equal to \"3.14*sqrt(ux^2 + uy^2 + uz^2)\"","category":"page"},{"location":"quickstart/#Data-Interpolation","page":"Quick Start","title":"Data Interpolation","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"One of the main features of the package is the ability to stitch together and interpolate patch data. This can be done with both unigrid and mesh-refined simulations. Additionally, data can be up or downscaled to any given dimensions in order to either increase resolution or save memory. This functionality is exported by the JuliaDispatch.Buffers module. See [REF BUFFERS] for details.","category":"page"},{"location":"quickstart/#Usage-Examples","page":"Quick Start","title":"Usage Examples","text":"","category":"section"},{"location":"quickstart/#Loading-a-Snapshot","page":"Quick Start","title":"Loading a Snapshot","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using JuliaDispatch\nusing JuliaDispatch.Dispatch\ndata = \"../test/data/orz/data\" # hide\nsnap = snapshot(100, data=data) # data is a string variable pointing to the folder containing the snapshots\nprintln(\"Snapshot time: $(snap[\"time\"])) # get the time the snapshot was taken\nprintln(\"Number of patches = $(length(snap[\"patches\"]))) # print the number of patches","category":"page"},{"location":"quickstart/#Extracting-Interpolated-Data","page":"Quick Start","title":"Extracting Interpolated Data","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using JuliaDispatch.Buffers\n\ndensity_plane = unigrid_plane(snap, iv=\"d\", z=0.1) # get the density in the xy-plane at z=0.1\ndensity_plane_downscaled = amr_plane(snap, iv=\"d\", z=0.1, dims=(200, 300)) # amr_plane can be used to downscale/upscale data\n\ndensity_volume = unigrid_volum(snap, iv=\"d\") # similar for a 3D volume\ndensity_volume_downscaled = amr_volume(snap, iv=\"d\", dims=100)","category":"page"},{"location":"quickstart/#Plotting","page":"Quick Start","title":"Plotting","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start","title":"Quick Start","text":"using JuliaDispatch.Graphics\n\nsliceplot(snap, iv=\"d\", z=1.0) # plot a simple sliceplot of density at z=1.0\nsliceplot(snap, iv=\"sqrt(bx^2+by^2+bz^2)\", y=-10) # plot an expression\nsliceplot(snap, iv=\"d\", z=0.1, center=(3, 2), width=(6, 6)) # zoom in with (3,2) as the center and a width of (6, 6)\nsliceplot(snap, iv=\"d\", z=0.1, resample=true, dims=(400, 600)) # up/down-scale to a size of (400, 600)\nsliceplot(snap, iv=\"ekin\", z=0.1, linetype=:surf) # surface plot\n\nplot_values_along(snap, [0.5, 0.5, 0.1], dir=3, iv=\"d\") # plot density along z-axis through point (.5, .5, 0.1)\nhistogram_along(snap, [0.5, 0.5, 0.1], dir=3, iv=\"d\", norm=:pdf, label=\"density\") # histogram normalized to probability density\nanim_pane(snap, ax=3, iv=\"d\", nframes=20, start=0.0, stop=-10.0, savepath=\"test.gif\") # animate a panning in z-direction from -10 to 0 ","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"<!â€“ # Overview","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"JuliaDispatch.jl is a package developed for analysis and visualization of simulations from the Dispatch framework.","category":"page"},{"location":"installation/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"To install the package, enter the Julia package manager (Pkg) by typing ] in the Julia REPL, followed by","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"pkg> add \"https://github.com/casparwb/JuliaDispatch.jl\"","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"You can check that your environment contains the package by typing (still inside Pkg)","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"pkg> status","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"which should list JuliaDispatch as one of the available packages. To utilize the package, import it into your workspace by typing","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"julia> using JuliaDispatch","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"This might take a while as Julia has to precompile the package. ","category":"page"},{"location":"installation/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"The JuliaDispatch package contains multiple submodules each of which contains functions and methods for performing various tasks, such as reading in a snapshot, visualization, and data buffering. The full list of modules is","category":"page"},{"location":"installation/","page":"Getting Started","title":"Getting Started","text":"Dispatch: this submodule contains the snapshot(...) function which allows reading in a snapshot and saving all the metadata into a dictionary.\nGraphics: high-level plotting of slices (planes), volumes, and 1-d quantities.\nBuffers: methods for stitching together patch data into 2- or 3-dimensional arrays, in addition to resampling methods for re-sizing the domain.\nSelect: methods for extracting patches and data at given positions in the computational domain.\nDispatchUtils:  â€“>","category":"page"},{"location":"graphics/#The-JuliaDispatch.Graphics-Module","page":"Graphics","title":"The JuliaDispatch.Graphics Module","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"This module contains various functions for visualizations, including 1D, 2D and 3D plots and simple animations.","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"To begin, first import the module into your workspace ","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"using JuliaDispatch.Graphics","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"Assuming you already have a snapshot loaded, you can then call the various plotting functions to visualize quantities. All the plotting functions accepts keyword arguments which are supported by the Plots.jl GR backend. See [documentation][http://docs.juliaplots.org/latest/generated/gr/] for all possible keyword arguments. This means that you can set title, axis labels, fontsizes, linestyle (lineplot, scatter, heatmap, surface, etc) manually. ","category":"page"},{"location":"graphics/#sliceplot","page":"Graphics","title":"sliceplot","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"The sliceplot function is the main function for plotting a quantity in a given plane. The function is very flexible and includes, among other things, the possibility to zoom in on certain regions by using the center and/or width keyword arguments. If the given combination of center and width extends beyond a boundary, the function will look for periodicity in the snapshot and stitch together the data beyond the boundary.","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"By default, sliceplot assumes the snapshot data is not mesh-refined. If it is mesh-refined, make sure the unigrid keyword argument is set to false.","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"It it possible to downscale the data to save memory by setting the resample keyword argument to true. This will rescale the data to a size defined by the dims keyword argument, which is by default set to 300. dims can be either an integer, which rescales the data to have the same number of grid points in each dimension, or a 2D collection (Tuple or Array) with the number of grid points for each axis.  ","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"JuliaDispatch.Graphics.sliceplot","category":"page"},{"location":"graphics/#plot*values*along","page":"Graphics","title":"plotvaluesalong","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"To plot values of a quantity along a given axis through a given point, use the function plot_values_along. This function takes in a snapshot, a point (in the form of a length-3 array) as arguments, and the quantity iv and the axis direction dir as keyword arguments, in addition to any keyword argument accepted by the Plots.plot() function.","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"JuliaDispatch.Graphics.plot_values_along","category":"page"},{"location":"graphics/#histogram_along","page":"Graphics","title":"histogram_along","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"The function histogram_along computes and plots a histogram of a quantity iv along a direction dir through a point pt. By default the histogram shows the absolute frequency (counts), but can be changed to a probability density or probability by setting the keyword argument norm to, respectively, :pdf or :probability. Additionally you define the bins with the bins keyword argument. ","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"JuliaDispatch.Graphics.histogram_along","category":"page"},{"location":"graphics/#volume","page":"Graphics","title":"volume","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"work in progress","category":"page"},{"location":"graphics/#anim_plane","page":"Graphics","title":"anim_plane","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"To produce a time-evolution animation of given quantity in a 2D plane, use the anim_plane function. This function accepts any keyword arguments accepted by sliceplot, in addition to the tspan keyword argument which can be a tuple of numbers denoting at which time (which snapshot) to start and end the simulation. Additionally, the step keyword arguments defines whether to use all snapshots or to skip with a given step value.","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"JuliaDispatch.Graphics.anim_plane","category":"page"},{"location":"graphics/#JuliaDispatch.Graphics.anim_plane","page":"Graphics","title":"JuliaDispatch.Graphics.anim_plane","text":"anim_plane(;data=\"../data\", run=\"\", x = nothing, y = nothing, z = nothing, iv=0, \n            tspan=nothing, unigrid=true, step=1, savepath=nothing, verbose = 0, kw...)\n\nAnimate a plane of quantity iv at a slice x/y/z. If tspan tuple is not given, all snapshots will be used, otherwise only snapshots with time within the given tspan will be loaded. A frame will be recorded every step, and the resulting animation will be saved to savepath. \n\n\n\n\n\n","category":"function"},{"location":"graphics/#anim_pane","page":"Graphics","title":"anim_pane","text":"","category":"section"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"If you want animate a pane through the computational domain in a certain direction, call the anim_pane function. This function accepts any keyword argument supported by sliceplot in addition to the nframes keyword argument which denotes how many frames will be written to the output video file. By default a pan will be made from the minimum value of the given axis to the maximum value, but this can be overwritten by setting the keyword arguments start and/or stop to desired values. Additionally you can set reverse to true if you would like to pan from the maximum value to the minimum. ","category":"page"},{"location":"graphics/","page":"Graphics","title":"Graphics","text":"JuliaDispatch.Graphics.anim_pane","category":"page"},{"location":"graphics/#JuliaDispatch.Graphics.anim_pane","page":"Graphics","title":"JuliaDispatch.Graphics.anim_pane","text":"anim_pane(snap; ax=1, nframes=10, unigrid=true, iv=iv, reverse=false\n          start=nothing, stop=nothing, verbose=0, savepath = nothing, kw...)\n\nPlot and animate a pane through axis ax from start to stop with nframes frames of quantity iv. Output is saved to savepath. Will go from low to high axis values unless reverse is set to true.\n\n#Examples\n\njulia> anim_pane(snap, ax=3, iv=\"d\", nframes=100, start=0.0, stop=-10.0, savepath=\"test.gif\", reverse=true)\n\n\n\n\n\n","category":"function"},{"location":"#Overview","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"Overview","text":"","category":"section"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"JuliaDispatch.jl is a package developed for analysis and visualization of simulations from the Dispatch framework.","category":"page"},{"location":"#Installation","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"Installation","text":"","category":"section"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"To install the package, enter the Julia package manager (Pkg) by typing ] in the Julia REPL, followed by","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"pkg> add \"https://github.com/casparwb/JuliaDispatch.jl\"","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"You can check that your environment contains the package by typing (still inside Pkg)","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"pkg> status","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"which should list JuliaDispatch as one of the available packages. To utilize the package, import it into your workspace by typing","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"julia> using JuliaDispatch","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"This might take a while as Julia has to precompile the package. ","category":"page"},{"location":"#Getting-Started","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"Getting Started","text":"","category":"section"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"The JuliaDispatch package contains multiple submodules each of which contains functions and methods for performing various tasks, such as reading in a snapshot, visualization, and data buffering. The full list of modules is","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"Dispatch: this submodule contains the snapshot(...) function which allows reading in a snapshot and saving all the metadata into a dictionary.\nGraphics: high-level plotting of slices (planes), volumes, and 1-d quantities.\nBuffers: methods for stitching together patch data into 2- or 3-dimensional arrays, in addition to resampling methods for re-sizing the domain.\nSelect: methods for extracting patches and data at given positions in the computational domain.\nDispatchUtils: ","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"All of these modules can imported into the workspace by typing (after having imported the JuliaDispatch module))","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"julia> using JuliaDispatch.ModuleName","category":"page"},{"location":"","page":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","title":"JuliaDispatch: Analysis and Visualization Tools for Dispatch","text":"where ModuleName is replaced with any of the abovementioned submodules.","category":"page"},{"location":"dispatch/#The-JuliaDispatch.Dispatch-Module","page":"Dispatch","title":"The JuliaDispatch.Dispatch Module","text":"","category":"section"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"This module contains the snapshot-function, which is used for reading a snapshot and parsing the patches.","category":"page"},{"location":"dispatch/#Usage","page":"Dispatch","title":"Usage","text":"","category":"section"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"After having imported the JuliaDispatch module into your workspace, simply do","category":"page"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"julia> using JuliaDispatch.Dispatch","category":"page"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"The function snapshot is then available. See end of page for documentation and examples.","category":"page"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"When reading in a snapshot with the snapshot function, a dictionary will be returned. All the properties of the snapshot can be accessed using square brackets and a string with the name of the property. For example, if you want to know the time at which the snapshot was taken, do","category":"page"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"julia> snap[\"time\"]","category":"page"},{"location":"dispatch/#Function-Documentation","page":"Dispatch","title":"Function Documentation","text":"","category":"section"},{"location":"dispatch/","page":"Dispatch","title":"Dispatch","text":"JuliaDispatch.Dispatch.snapshot","category":"page"},{"location":"dispatch/#JuliaDispatch.Dispatch.snapshot","page":"Dispatch","title":"JuliaDispatch.Dispatch.snapshot","text":"snapshot(iotu::Int; run::String, data::String, verbose::Int)\n\nParses patches and returns a Dict with all properties of snapshot iout.\n\n#Arguments:\n\niout::Int, snapshot ID\n\n#Kwargs:\n\ndata::String, path to data (snapshots), default \"..\\data\"\nrun::String, path to snapshots folders relative to data, default \"\"\n\n\n\n\n\n","category":"function"}]
}
